{"ast":null,"code":"var _jsxFileName = \"/home/thomas/library_sortouch/react_library/src/lib/chatbotArea/ChatBotArea.js\";\nimport React, { useState, useEffect } from 'react';\nimport Questionchat from '../questionBlock/QuestionChat';\nimport FormContact from '../fromContact/FormContact';\nimport './ChatBotArea.css';\n\nconst ChatBotArea = () => {\n  const [containers, setContainers] = useState([]);\n  const [cardsQuest, setCardsQuest] = useState([]);\n  const [cardsRes, setCardsRes] = useState([]);\n  const [cardsCategory, setCardsCategory] = useState([]);\n  const [responseSelect, setResponseSelect] = useState(0);\n  const [storageContainers, setStorageContainers] = useState();\n  const [responseSelected, setResponseSelected] = useState([]);\n  const [, setResponseBool] = useState(false);\n  const [, setLastResContainerIndex] = useState();\n  const [pair, setPair] = useState(false);\n  const [modelId, setModelId] = useState();\n  const [userId, setUserId] = useState();\n  useEffect(() => {\n    const stockUrl = String(window.location.href).split('');\n    let detect = 0;\n    let nb1 = 0;\n    let nb2 = 0;\n\n    for (let i = 0; i < stockUrl.length; i++) {\n      if (stockUrl[i] === 'w') {\n        detect = 1;\n      }\n\n      if (stockUrl[i + 1] === '&') {\n        detect = 2;\n      }\n\n      if (detect === 1) {\n        nb1 = nb1 + stockUrl[i + 1];\n      }\n\n      if (detect === 2) {\n        nb2 += stockUrl[i];\n      }\n    }\n\n    setUserId((parseInt(nb1.split('0')[1]) - 150) / 48 * 16);\n    setModelId((parseInt(nb2.split('&')[1]) - 150) / 8 * 4);\n  }, []);\n\n  const printContainers = async () => {\n    try {\n      console.log(`http://192.168.43.193:8000/api/container/findAll/${userId}/${modelId}/${responseSelect}`);\n      const resJson = await fetch(`http://192.168.43.193:8000/api/container/findAll/${userId}/${responseSelect}/${modelId}`);\n      const res = await resJson.json();\n      const storageContainer = await storageContainers;\n\n      if (res.length) {\n        if (storageContainer) {\n          let resResult = res.filter(res => res.response_id != null);\n          let newContainer = [...storageContainer, ...resResult];\n          setContainers(newContainer);\n          takeCard(newContainer);\n        } else {\n          setContainers(res);\n          takeCard(res);\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n    setStorageContainers(containers);\n  };\n\n  console.log(containers);\n\n  const takeCard = async res => {\n    let stock = [];\n\n    for (let i = 0; i < res.length + 3; i++) {\n      if (res[i]) {\n        const result = (await fetch(`http://192.168.43.193:8000/api/relation/findCardQuestion/${res[i].id}/${userId}/${modelId}`)).json();\n        stock = [...stock, result];\n        setCardsQuest(stock);\n      }\n    }\n\n    let stockRes = [];\n\n    for (let i = 0; i < res.length + 3; i++) {\n      if (res[i]) {\n        const result = (await fetch(`${url}/relation/findCardResponse/${res[i].id}/${userId}/${modelId}`)).json();\n        stockRes = [...stockRes, result];\n        setCardsRes(stockRes);\n      }\n    }\n\n    let stockCategory = [];\n\n    for (let i = 0; i < res.length + 3; i++) {\n      if (typeof res[i] === 'object') {\n        const result = (await fetch(`${url}/relation/findCardCategory/${res[i].id}/${userId}/${modelId}`)).json();\n        stockCategory = [...stockCategory, result];\n        setCardsCategory(stockCategory);\n      }\n    }\n  };\n\n  const selectResponse = async function (cardId, index) {\n    console.log(pair);\n    setPair(!pair);\n    const stockContainers = containers;\n    const numberCard = cardId;\n    const containerIndex = index;\n    setLastResContainerIndex(containerIndex);\n    setResponseSelect(numberCard);\n    responseSelected.length = cardId;\n    stockContainers.length = containerIndex;\n    let stockResponseSelected = [...responseSelected, numberCard];\n\n    for (let a = 0; a < cardsRes.length; a++) {\n      if (cardsRes[a].length) {\n        for (let b = 0; b < cardsRes[a].length; b++) {\n          for (let c = 0; c < stockResponseSelected.length; c++) {\n            const nbRes = cardsRes[a].filter(card => stockResponseSelected.includes(card.id));\n\n            if (nbRes.length > 1) {\n              for (let i = 0; i < stockResponseSelected.length; i++) {\n                console.log(nbRes);\n\n                for (let a = 0; a < nbRes.length - 1; a++) {\n                  if (nbRes[a].id === stockResponseSelected[i]) {\n                    stockResponseSelected.splice(i, 1);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    setResponseSelected(stockResponseSelected);\n    setStorageContainers(stockContainers);\n    setTimeout(() => {\n      printContainers();\n      setResponseBool(true);\n    }, 200);\n    setTimeout(() => {\n      window.scrollTo(0, document.body.scrollHeight);\n    }, 700);\n  };\n\n  useEffect(() => {\n    console.log('dalu');\n    printContainers();\n  }, [userId]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"containerAreaChatBot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, Array.isArray(containers) && containers.map((container, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: container.content_type === \"question\" && index % 3 !== 0 ? \"contentQuestionChat\" : container.content_type === \"question\" && index % 3 === 0 ? \"contentQuestionChatDecale\" : container.content_type === \"response\" ? \"contentResponseChat\" : \"contentDestinationChat\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }\n    }, Array.isArray(cardsQuest[index]) && container.content_type === \"question\" && cardsQuest[index].map(card => {\n      return /*#__PURE__*/React.createElement(Questionchat, {\n        pair: pair,\n        question: card.content.split(''),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 41\n        }\n      });\n    }), Array.isArray(cardsRes[index]) && container.content_type === \"response\" && cardsRes[index].map(card => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        onClick: () => {\n          selectResponse(card.id, index);\n        },\n        className: responseSelected.includes(card.id) ? 'containerCardResChatActive' : 'containerCardResChat',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        id: `container${index}`,\n        className: \"textCardResChat\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 45\n        }\n      }, card.content));\n    }), Array.isArray(cardsCategory[index]) && container.content_type === \"category\" && cardsCategory[index].map(card => {\n      console.log(card);\n      return /*#__PURE__*/React.createElement(FormContact, {\n        categoryId: card.id,\n        userId: userId,\n        modelId: modelId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 41\n        }\n      });\n    }));\n  }));\n};\n\nexport default ChatBotArea;","map":{"version":3,"sources":["/home/thomas/library_sortouch/react_library/src/lib/chatbotArea/ChatBotArea.js"],"names":["React","useState","useEffect","Questionchat","FormContact","ChatBotArea","containers","setContainers","cardsQuest","setCardsQuest","cardsRes","setCardsRes","cardsCategory","setCardsCategory","responseSelect","setResponseSelect","storageContainers","setStorageContainers","responseSelected","setResponseSelected","setResponseBool","setLastResContainerIndex","pair","setPair","modelId","setModelId","userId","setUserId","stockUrl","String","window","location","href","split","detect","nb1","nb2","i","length","parseInt","printContainers","console","log","resJson","fetch","res","json","storageContainer","resResult","filter","response_id","newContainer","takeCard","error","stock","result","id","stockRes","url","stockCategory","selectResponse","cardId","index","stockContainers","numberCard","containerIndex","stockResponseSelected","a","b","c","nbRes","card","includes","splice","setTimeout","scrollTo","document","body","scrollHeight","Array","isArray","map","container","content_type","content"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Questionchat from '../questionBlock/QuestionChat';\nimport FormContact from '../fromContact/FormContact';\nimport './ChatBotArea.css'\n\nconst ChatBotArea = () => {\n    const [containers, setContainers] = useState([])\n    const [cardsQuest, setCardsQuest] = useState([])\n    const [cardsRes, setCardsRes] = useState([])\n    const [cardsCategory, setCardsCategory] = useState([])\n    const [responseSelect, setResponseSelect] = useState(0)\n    const [storageContainers, setStorageContainers] = useState()\n    const [responseSelected, setResponseSelected] = useState([])\n    const [, setResponseBool] = useState(false)\n    const [, setLastResContainerIndex] = useState()\n    const [pair, setPair] = useState(false)\n    const [modelId, setModelId] = useState()\n    const [userId, setUserId] = useState()\n\n    useEffect(() => {\n        const stockUrl = String(window.location.href).split('')\n        let detect = 0\n        let nb1 = 0\n        let nb2 = 0\n        for(let i = 0; i < stockUrl.length; i++){\n            if(stockUrl[i] === 'w'){\n                detect = 1\n            }\n            if(stockUrl[i + 1] === '&'){\n                detect = 2\n            }\n            if(detect === 1){\n                nb1 = nb1 + stockUrl[i + 1]\n            }\n            if(detect === 2){\n                nb2 += stockUrl[i]\n            }\n        }\n        setUserId((parseInt(nb1.split('0')[1]) - 150)/48*16)\n        setModelId((parseInt(nb2.split('&')[1]) - 150)/8*4)\n    }, [])\n\n    const printContainers = async () => {\n        try{\n            console.log(`http://192.168.43.193:8000/api/container/findAll/${userId}/${modelId}/${responseSelect}`)\n            const resJson = await fetch(`http://192.168.43.193:8000/api/container/findAll/${userId}/${responseSelect}/${modelId}`)\n            const res = await resJson.json()\n            const storageContainer = await storageContainers\n                if(res.length){\n                    if(storageContainer){\n                        let resResult = res.filter(res => res.response_id != null)\n                        let newContainer = [...storageContainer, ...resResult]\n                        setContainers(newContainer)\n                        takeCard(newContainer)\n                    } else {\n                        setContainers(res)\n                        takeCard(res)\n                    }\n                }\n            \n        } catch(error) {\n            console.log(error)\n        }\n        setStorageContainers(containers)\n    }\n\n    console.log(containers)\n\n    const takeCard = async (res) => {\n        let stock = []\n        for(let i = 0; i < res.length + 3; i++){\n            if(res[i]){\n                const result = (await fetch(`http://192.168.43.193:8000/api/relation/findCardQuestion/${res[i].id}/${userId}/${modelId}`)).json()\n                stock = [...stock, result]\n                setCardsQuest(stock)\n            }\n        }\n        let stockRes = []\n        for(let i = 0; i < res.length + 3; i++){\n            if(res[i]){\n                const result = (await fetch(`${url}/relation/findCardResponse/${res[i].id}/${userId}/${modelId}`)).json()\n                stockRes = [...stockRes, result]\n                setCardsRes(stockRes)\n            }\n        }\n        let stockCategory = []\n        for(let i = 0; i < res.length + 3; i++){\n            if(typeof res[i] === 'object'){\n                const result = (await fetch(`${url}/relation/findCardCategory/${res[i].id}/${userId}/${modelId}`)).json()\n                stockCategory = [...stockCategory, result]\n                setCardsCategory(stockCategory)\n            }\n        }\n    }\n\n    const selectResponse = async function (cardId, index) {\n        console.log(pair)\n        setPair(!pair)\n        const stockContainers = containers\n        const numberCard = cardId\n        const containerIndex = index\n\n        setLastResContainerIndex(containerIndex)\n        setResponseSelect(numberCard)\n\n        \n\n        responseSelected.length = cardId\n        stockContainers.length = containerIndex\n\n        \n        let stockResponseSelected = ([...responseSelected, numberCard])\n\n            for(let a = 0; a < cardsRes.length; a++){\n                if(cardsRes[a].length){\n                    for(let b = 0; b < cardsRes[a].length; b++){\n                            for(let c = 0; c < stockResponseSelected.length; c++){\n                                const nbRes = cardsRes[a].filter(card => stockResponseSelected.includes(card.id))\n                                if(nbRes.length > 1){\n                                    for(let i = 0; i < stockResponseSelected.length; i++){\n                                        console.log(nbRes)\n                                        for(let a = 0; a < nbRes.length - 1; a++){\n                                            if(nbRes[a].id === (stockResponseSelected[i])){\n                                                stockResponseSelected.splice(i, 1)\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n        setResponseSelected(stockResponseSelected)\n\n        setStorageContainers(stockContainers)\n\n        setTimeout(() => {\n            printContainers()\n            setResponseBool(true)\n        }, 200)\n        setTimeout(() => {\n            window.scrollTo(0,document.body.scrollHeight);\n        }, 700)\n    }\n\n\n    useEffect(() => {\n        console.log('dalu')\n        printContainers()\n    },[userId])\n\n    \n\n    return(\n        <div className=\"containerAreaChatBot\">\n            {Array.isArray(containers) &&\n            containers.map((container, index) => {\n                return(\n                    <div className={container.content_type === \"question\" && index%3 !== 0 ? \"contentQuestionChat\" : container.content_type === \"question\" && index%3 === 0 ? \"contentQuestionChatDecale\" : container.content_type === \"response\" ? \"contentResponseChat\" : \"contentDestinationChat\"}>\n                            {Array.isArray(cardsQuest[index]) && container.content_type === \"question\" &&\n                                cardsQuest[index].map(card => {\n                                    return(\n                                        <Questionchat pair={pair} question={card.content.split('')}/>\n                                    )\n                                })}\n                            {Array.isArray(cardsRes[index]) && container.content_type === \"response\" &&\n                                cardsRes[index].map(card => {\n                                    return(\n                                        <div onClick={() => {selectResponse(card.id, index)}}   className={responseSelected.includes(card.id) ? 'containerCardResChatActive' : 'containerCardResChat'}>\n                                            <p id={`container${index}`} className=\"textCardResChat\">{card.content}</p>\n                                        </div>)\n                                        })\n                                    }\n                            {Array.isArray(cardsCategory[index]) && container.content_type === \"category\" &&\n                                cardsCategory[index].map(card => {\n                                    console.log(card)\n                                    return(\n                                        <FormContact categoryId={card.id} userId={userId} modelId={modelId} />\n                                    )\n                                })}\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default ChatBotArea"]},"metadata":{},"sourceType":"module"}