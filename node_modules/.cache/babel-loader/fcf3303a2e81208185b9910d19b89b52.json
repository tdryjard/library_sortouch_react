{"ast":null,"code":"var _jsxFileName = \"/home/thomas/library_sortouch/react_library/src/lib/chatbotArea/ChatBotArea.js\";\nimport React, { useState, useEffect } from 'react';\nimport Questionchat from '../questionBlock/QuestionChat';\nimport FormContact from '../fromContact/FormContact';\nimport './ChatBotArea.css';\n\nconst ChatBotArea = () => {\n  const [containers, setContainers] = useState([]);\n  const [cardsQuest, setCardsQuest] = useState([]);\n  const [cardsRes, setCardsRes] = useState([]);\n  const [cardsCategory, setCardsCategory] = useState([]);\n  const [responseSelect, setResponseSelect] = useState(0);\n  const [storageContainers, setStorageContainers] = useState();\n  const [responseSelected, setResponseSelected] = useState([]);\n  const [, setResponseBool] = useState(false);\n  const [, setLastResContainerIndex] = useState();\n  const [pair, setPair] = useState(false);\n  const [modelId, setModelId] = useState(3);\n  const [userId, setUserId] = useState(1);\n  useEffect(() => {\n    console.log('dalu');\n    printContainers();\n  }, [userId]);\n\n  const printContainers = async () => {\n    try {\n      const resJson = await fetch(`http://192.168.43.193:8000/api/container/findAll/${userId}/${responseSelect}/${modelId}`);\n      const res = await resJson.json();\n      const storageContainer = await storageContainers;\n\n      if (res.length) {\n        if (storageContainer) {\n          let resResult = res.filter(res => res.response_id != null);\n          let newContainer = [...storageContainer, ...resResult];\n          setContainers(newContainer);\n          takeCard(newContainer);\n        } else {\n          setContainers(res);\n          takeCard(res);\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n    setStorageContainers(containers);\n  };\n\n  console.log(containers);\n\n  const takeCard = async res => {\n    let stock = [];\n\n    for (let i = 0; i < res.length + 3; i++) {\n      if (res[i]) {\n        let resulted = await fetch(`http://192.168.43.193:8000/api/relation/findCardQuestion/${res[i].id}/${userId}/${modelId}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const result = await resulted.json();\n        console.log(result);\n        stock = [...stock, result];\n        setCardsQuest(stock);\n      }\n    }\n\n    let stockRes = [];\n\n    for (let i = 0; i < res.length + 3; i++) {\n      if (res[i]) {\n        let resulted = await fetch(`http://192.168.43.193:8000/api/relation/findCardResponse/${res[i].id}/${userId}/${modelId}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const result = await resulted.json();\n        stockRes = [...stockRes, result];\n        setCardsRes(stockRes);\n      }\n    }\n\n    let stockCategory = [];\n\n    for (let i = 0; i < res.length + 3; i++) {\n      if (typeof res[i] === 'object') {\n        let resulted = await fetch(`http://192.168.43.193:8000/api/relation/findCardCategory/${res[i].id}/${userId}/${modelId}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const result = await resulted.json();\n        stockCategory = [...stockCategory, result];\n        setCardsCategory(stockCategory);\n      }\n    }\n  };\n\n  const selectResponse = async function (cardId, index) {\n    console.log(pair);\n    setPair(!pair);\n    const stockContainers = containers;\n    const numberCard = cardId;\n    const containerIndex = index;\n    setLastResContainerIndex(containerIndex);\n    setResponseSelect(numberCard);\n    responseSelected.length = cardId;\n    stockContainers.length = containerIndex;\n    let stockResponseSelected = [...responseSelected, numberCard];\n\n    for (let a = 0; a < cardsRes.length; a++) {\n      if (cardsRes[a].length) {\n        for (let b = 0; b < cardsRes[a].length; b++) {\n          for (let c = 0; c < stockResponseSelected.length; c++) {\n            const nbRes = cardsRes[a].filter(card => stockResponseSelected.includes(card.id));\n\n            if (nbRes.length > 1) {\n              for (let i = 0; i < stockResponseSelected.length; i++) {\n                console.log(nbRes);\n\n                for (let a = 0; a < nbRes.length - 1; a++) {\n                  if (nbRes[a].id === stockResponseSelected[i]) {\n                    stockResponseSelected.splice(i, 1);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    setResponseSelected(stockResponseSelected);\n    setStorageContainers(stockContainers);\n    setTimeout(() => {\n      printContainers();\n      setResponseBool(true);\n    }, 200);\n    setTimeout(() => {\n      window.scrollTo(0, document.body.scrollHeight);\n    }, 700);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"containerAreaChatBot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, Array.isArray(containers) && containers.map((container, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: container.content_type === \"question\" && index % 3 !== 0 ? \"contentQuestionChat\" : container.content_type === \"question\" && index % 3 === 0 ? \"contentQuestionChatDecale\" : container.content_type === \"response\" ? \"contentResponseChat\" : \"contentDestinationChat\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }\n    }, Array.isArray(cardsQuest[index]) && container.content_type === \"question\" && cardsQuest[index].map(card => {\n      return /*#__PURE__*/React.createElement(Questionchat, {\n        pair: pair,\n        question: card.content.split(''),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 41\n        }\n      });\n    }), Array.isArray(cardsRes[index]) && container.content_type === \"response\" && cardsRes[index].map(card => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        onClick: () => {\n          selectResponse(card.id, index);\n        },\n        className: responseSelected.includes(card.id) ? 'containerCardResChatActive' : 'containerCardResChat',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        id: `container${index}`,\n        className: \"textCardResChat\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 45\n        }\n      }, card.content));\n    }), Array.isArray(cardsCategory[index]) && container.content_type === \"category\" && cardsCategory[index].map(card => {\n      console.log(card);\n      return /*#__PURE__*/React.createElement(FormContact, {\n        categoryId: card.id,\n        userId: userId,\n        modelId: modelId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 41\n        }\n      });\n    }));\n  }));\n};\n\nexport default ChatBotArea;","map":{"version":3,"sources":["/home/thomas/library_sortouch/react_library/src/lib/chatbotArea/ChatBotArea.js"],"names":["React","useState","useEffect","Questionchat","FormContact","ChatBotArea","containers","setContainers","cardsQuest","setCardsQuest","cardsRes","setCardsRes","cardsCategory","setCardsCategory","responseSelect","setResponseSelect","storageContainers","setStorageContainers","responseSelected","setResponseSelected","setResponseBool","setLastResContainerIndex","pair","setPair","modelId","setModelId","userId","setUserId","console","log","printContainers","resJson","fetch","res","json","storageContainer","length","resResult","filter","response_id","newContainer","takeCard","error","stock","i","resulted","id","method","headers","result","stockRes","stockCategory","selectResponse","cardId","index","stockContainers","numberCard","containerIndex","stockResponseSelected","a","b","c","nbRes","card","includes","splice","setTimeout","window","scrollTo","document","body","scrollHeight","Array","isArray","map","container","content_type","content","split"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Questionchat from '../questionBlock/QuestionChat';\nimport FormContact from '../fromContact/FormContact';\nimport './ChatBotArea.css'\n\nconst ChatBotArea = () => {\n    const [containers, setContainers] = useState([])\n    const [cardsQuest, setCardsQuest] = useState([])\n    const [cardsRes, setCardsRes] = useState([])\n    const [cardsCategory, setCardsCategory] = useState([])\n    const [responseSelect, setResponseSelect] = useState(0)\n    const [storageContainers, setStorageContainers] = useState()\n    const [responseSelected, setResponseSelected] = useState([])\n    const [, setResponseBool] = useState(false)\n    const [, setLastResContainerIndex] = useState()\n    const [pair, setPair] = useState(false)\n    const [modelId, setModelId] = useState(3)\n    const [userId, setUserId] = useState(1)\n\n    useEffect(() => {\n        console.log('dalu')\n        printContainers()\n    },[userId])\n\n    const printContainers = async  () => {\n        try{\n            const resJson = await fetch(`http://192.168.43.193:8000/api/container/findAll/${userId}/${responseSelect}/${modelId}`)\n            const res = await resJson.json()\n            const storageContainer = await storageContainers\n                if(res.length){\n                    if(storageContainer){\n                        let resResult = res.filter(res => res.response_id != null)\n                        let newContainer = [...storageContainer, ...resResult]\n                        setContainers(newContainer)\n                        takeCard(newContainer)\n                    } else {\n                        setContainers(res)\n                        takeCard(res)\n                    }\n                }\n            \n        } catch(error) {\n            console.log(error)\n        }\n        setStorageContainers(containers)\n    }\n\n    console.log(containers)\n\n    const takeCard = async (res) => {\n        let stock = []\n        for(let i = 0; i < res.length + 3; i++){\n            if(res[i]){\n                let resulted = await fetch(`http://192.168.43.193:8000/api/relation/findCardQuestion/${res[i].id}/${userId}/${modelId}`, {\n                    method: 'GET',\n                    headers: {\n                    'Content-Type' :'application/json'\n                    }\n                })\n                const result = await resulted.json()\n                console.log(result)\n                stock = [...stock, result]\n                setCardsQuest(stock)\n            }\n        }\n        let stockRes = []\n        for(let i = 0; i < res.length + 3; i++){\n            if(res[i]){\n                let resulted = await fetch(`http://192.168.43.193:8000/api/relation/findCardResponse/${res[i].id}/${userId}/${modelId}`, {\n                    method: 'GET',\n                    headers: {\n                    'Content-Type' :'application/json'\n                    }\n                })\n                const result = await resulted.json()\n                stockRes = [...stockRes, result]\n                setCardsRes(stockRes)\n            }\n        }\n        let stockCategory = []\n        for(let i = 0; i < res.length + 3; i++){\n            if(typeof res[i] === 'object'){\n                let resulted = await fetch(`http://192.168.43.193:8000/api/relation/findCardCategory/${res[i].id}/${userId}/${modelId}`, {\n                    method: 'GET',\n                    headers: {\n                    'Content-Type' :'application/json'\n                    }\n                })\n                const result = await resulted.json()\n                stockCategory = [...stockCategory, result]\n                setCardsCategory(stockCategory)\n            }\n        }\n    }\n\n    const selectResponse = async function (cardId, index) {\n        console.log(pair)\n        setPair(!pair)\n        const stockContainers = containers\n        const numberCard = cardId\n        const containerIndex = index\n\n        setLastResContainerIndex(containerIndex)\n        setResponseSelect(numberCard)\n\n        \n\n        responseSelected.length = cardId\n        stockContainers.length = containerIndex\n\n        \n        let stockResponseSelected = ([...responseSelected, numberCard])\n\n            for(let a = 0; a < cardsRes.length; a++){\n                if(cardsRes[a].length){\n                    for(let b = 0; b < cardsRes[a].length; b++){\n                            for(let c = 0; c < stockResponseSelected.length; c++){\n                                const nbRes = cardsRes[a].filter(card => stockResponseSelected.includes(card.id))\n                                if(nbRes.length > 1){\n                                    for(let i = 0; i < stockResponseSelected.length; i++){\n                                        console.log(nbRes)\n                                        for(let a = 0; a < nbRes.length - 1; a++){\n                                            if(nbRes[a].id === (stockResponseSelected[i])){\n                                                stockResponseSelected.splice(i, 1)\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n        setResponseSelected(stockResponseSelected)\n\n        setStorageContainers(stockContainers)\n\n        setTimeout(() => {\n            printContainers()\n            setResponseBool(true)\n        }, 200)\n        setTimeout(() => {\n            window.scrollTo(0,document.body.scrollHeight);\n        }, 700)\n    }\n\n\n    \n\n    \n\n    return(\n        <div className=\"containerAreaChatBot\">\n            {Array.isArray(containers) &&\n            containers.map((container, index) => {\n                return(\n                    <div className={container.content_type === \"question\" && index%3 !== 0 ? \"contentQuestionChat\" : container.content_type === \"question\" && index%3 === 0 ? \"contentQuestionChatDecale\" : container.content_type === \"response\" ? \"contentResponseChat\" : \"contentDestinationChat\"}>\n                            {Array.isArray(cardsQuest[index]) && container.content_type === \"question\" &&\n                                cardsQuest[index].map(card => {\n                                    return(\n                                        <Questionchat pair={pair} question={card.content.split('')}/>\n                                    )\n                                })}\n                            {Array.isArray(cardsRes[index]) && container.content_type === \"response\" &&\n                                cardsRes[index].map(card => {\n                                    return(\n                                        <div onClick={() => {selectResponse(card.id, index)}}   className={responseSelected.includes(card.id) ? 'containerCardResChatActive' : 'containerCardResChat'}>\n                                            <p id={`container${index}`} className=\"textCardResChat\">{card.content}</p>\n                                        </div>)\n                                        })\n                                    }\n                            {Array.isArray(cardsCategory[index]) && container.content_type === \"category\" &&\n                                cardsCategory[index].map(card => {\n                                    console.log(card)\n                                    return(\n                                        <FormContact categoryId={card.id} userId={userId} modelId={modelId} />\n                                    )\n                                })}\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default ChatBotArea"]},"metadata":{},"sourceType":"module"}