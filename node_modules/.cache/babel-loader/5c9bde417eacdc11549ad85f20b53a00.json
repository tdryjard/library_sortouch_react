{"ast":null,"code":"var _jsxFileName = \"/home/thomas/library_sortouch/react_library/src/lib/chatbotArea/ChatBotArea.js\";\nimport React, { useState, useEffect } from 'react';\nimport Questionchat from '../questionBlock/QuestionChat';\nimport FormContact from '../fromContact/FormContact';\nimport './ChatBotArea.css';\n\nconst ChatBotArea = () => {\n  const [containers, setContainers] = useState([]);\n  const [cardsQuest, setCardsQuest] = useState([]);\n  const [cardsRes, setCardsRes] = useState([]);\n  const [cardsCategory, setCardsCategory] = useState([]);\n  const [responseSelect, setResponseSelect] = useState(0);\n  const [storageContainers, setStorageContainers] = useState();\n  const [responseSelected, setResponseSelected] = useState([]);\n  const [, setResponseBool] = useState(false);\n  const [, setLastResContainerIndex] = useState();\n  const [pair, setPair] = useState(false);\n  const [modelId, setModelId] = useState(3);\n  const [userId, setUserId] = useState(1);\n  useEffect(() => {\n    async function printContainers() {\n      console.log('dalu');\n\n      try {\n        const resJson = await fetch(`http://192.168.43.193:8000/api/container/findAll/${userId}/${responseSelect}/${modelId}`);\n        const res = await resJson.json();\n        const storageContainer = await storageContainers;\n\n        if (res.length) {\n          if (storageContainer) {\n            let resResult = res.filter(res => res.response_id != null);\n            let newContainer = [...storageContainer, ...resResult];\n            setContainers(newContainer);\n            takeCard(newContainer);\n          } else {\n            setContainers(res);\n            takeCard(res);\n          }\n        }\n      } catch (error) {\n        console.log(error);\n      }\n\n      setStorageContainers(containers);\n    }\n\n    printContainers();\n  }, [responseSelected, containers, modelId, responseSelect, storageContainers, takeCard, userId]);\n\n  const printContainers = async () => {\n    console.log('dalu');\n\n    try {\n      const resJson = await fetch(`http://192.168.43.193:8000/api/container/findAll/${userId}/${responseSelect}/${modelId}`);\n      const res = await resJson.json();\n      const storageContainer = await storageContainers;\n\n      if (res.length) {\n        if (storageContainer) {\n          let resResult = res.filter(res => res.response_id != null);\n          let newContainer = [...storageContainer, ...resResult];\n          setContainers(newContainer);\n          takeCard(newContainer);\n        } else {\n          setContainers(res);\n          takeCard(res);\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n    setStorageContainers(containers);\n  };\n\n  console.log(containers);\n\n  const selectResponse = async function (cardId, index) {\n    console.log(pair);\n    setPair(!pair);\n    const stockContainers = containers;\n    const numberCard = cardId;\n    const containerIndex = index;\n    setLastResContainerIndex(containerIndex);\n    setResponseSelect(numberCard);\n    responseSelected.length = cardId;\n    stockContainers.length = containerIndex;\n    let stockResponseSelected = [...responseSelected, numberCard];\n\n    for (let a = 0; a < cardsRes.length; a++) {\n      if (cardsRes[a].length) {\n        for (let b = 0; b < cardsRes[a].length; b++) {\n          for (let c = 0; c < stockResponseSelected.length; c++) {\n            const nbRes = cardsRes[a].filter(card => stockResponseSelected.includes(card.id));\n\n            if (nbRes.length > 1) {\n              for (let i = 0; i < stockResponseSelected.length; i++) {\n                console.log(nbRes);\n\n                for (let a = 0; a < nbRes.length - 1; a++) {\n                  if (nbRes[a].id === stockResponseSelected[i]) {\n                    stockResponseSelected.splice(i, 1);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    setResponseSelected(stockResponseSelected);\n    setStorageContainers(stockContainers);\n    setTimeout(() => {\n      printContainers();\n      setResponseBool(true);\n    }, 200);\n    setTimeout(() => {\n      window.scrollTo(0, document.body.scrollHeight);\n    }, 700);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"containerAreaChatBot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, Array.isArray(containers) && containers.map((container, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: container.content_type === \"question\" && index % 3 !== 0 ? \"contentQuestionChat\" : container.content_type === \"question\" && index % 3 === 0 ? \"contentQuestionChatDecale\" : container.content_type === \"response\" ? \"contentResponseChat\" : \"contentDestinationChat\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }\n    }, Array.isArray(cardsQuest[index]) && container.content_type === \"question\" && cardsQuest[index].map(card => {\n      return /*#__PURE__*/React.createElement(Questionchat, {\n        pair: pair,\n        question: card.content.split(''),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 41\n        }\n      });\n    }), Array.isArray(cardsRes[index]) && container.content_type === \"response\" && cardsRes[index].map(card => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        onClick: () => {\n          selectResponse(card.id, index);\n        },\n        className: responseSelected.includes(card.id) ? 'containerCardResChatActive' : 'containerCardResChat',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        id: `container${index}`,\n        className: \"textCardResChat\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 45\n        }\n      }, card.content));\n    }), Array.isArray(cardsCategory[index]) && container.content_type === \"category\" && cardsCategory[index].map(card => {\n      console.log(card);\n      return /*#__PURE__*/React.createElement(FormContact, {\n        categoryId: card.id,\n        userId: userId,\n        modelId: modelId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 41\n        }\n      });\n    }));\n  }));\n};\n\nexport default ChatBotArea;","map":{"version":3,"sources":["/home/thomas/library_sortouch/react_library/src/lib/chatbotArea/ChatBotArea.js"],"names":["React","useState","useEffect","Questionchat","FormContact","ChatBotArea","containers","setContainers","cardsQuest","setCardsQuest","cardsRes","setCardsRes","cardsCategory","setCardsCategory","responseSelect","setResponseSelect","storageContainers","setStorageContainers","responseSelected","setResponseSelected","setResponseBool","setLastResContainerIndex","pair","setPair","modelId","setModelId","userId","setUserId","printContainers","console","log","resJson","fetch","res","json","storageContainer","length","resResult","filter","response_id","newContainer","takeCard","error","selectResponse","cardId","index","stockContainers","numberCard","containerIndex","stockResponseSelected","a","b","c","nbRes","card","includes","id","i","splice","setTimeout","window","scrollTo","document","body","scrollHeight","Array","isArray","map","container","content_type","content","split"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Questionchat from '../questionBlock/QuestionChat';\nimport FormContact from '../fromContact/FormContact';\nimport './ChatBotArea.css'\n\nconst ChatBotArea = () => {\n    const [containers, setContainers] = useState([])\n    const [cardsQuest, setCardsQuest] = useState([])\n    const [cardsRes, setCardsRes] = useState([])\n    const [cardsCategory, setCardsCategory] = useState([])\n    const [responseSelect, setResponseSelect] = useState(0)\n    const [storageContainers, setStorageContainers] = useState()\n    const [responseSelected, setResponseSelected] = useState([])\n    const [, setResponseBool] = useState(false)\n    const [, setLastResContainerIndex] = useState()\n    const [pair, setPair] = useState(false)\n    const [modelId, setModelId] = useState(3)\n    const [userId, setUserId] = useState(1)\n\n\n    \n\n\n    useEffect(() => {\n\n        \n        async function printContainers ()  {\n            console.log('dalu')\n            try{\n                const resJson = await fetch(`http://192.168.43.193:8000/api/container/findAll/${userId}/${responseSelect}/${modelId}`)\n                const res = await resJson.json()\n                const storageContainer = await storageContainers\n                    if(res.length){\n                        if(storageContainer){\n                            let resResult = res.filter(res => res.response_id != null)\n                            let newContainer = [...storageContainer, ...resResult]\n                            setContainers(newContainer)\n                            takeCard(newContainer)\n                        } else {\n                            setContainers(res)\n                            takeCard(res)\n                        }\n                    }\n                \n            } catch(error) {\n                console.log(error)\n            }\n            setStorageContainers(containers)\n        }\n\n        printContainers()\n    },[responseSelected, containers, modelId, responseSelect, storageContainers, takeCard, userId])\n\n    const printContainers = async () => {\n        console.log('dalu')\n        try{\n            const resJson = await fetch(`http://192.168.43.193:8000/api/container/findAll/${userId}/${responseSelect}/${modelId}`)\n            const res = await resJson.json()\n            const storageContainer = await storageContainers\n                if(res.length){\n                    if(storageContainer){\n                        let resResult = res.filter(res => res.response_id != null)\n                        let newContainer = [...storageContainer, ...resResult]\n                        setContainers(newContainer)\n                        takeCard(newContainer)\n                    } else {\n                        setContainers(res)\n                        takeCard(res)\n                    }\n                }\n            \n        } catch(error) {\n            console.log(error)\n        }\n        setStorageContainers(containers)\n    }\n\n    console.log(containers)\n\n    \n\n    const selectResponse = async function (cardId, index) {\n        console.log(pair)\n        setPair(!pair)\n        const stockContainers = containers\n        const numberCard = cardId\n        const containerIndex = index\n\n        setLastResContainerIndex(containerIndex)\n        setResponseSelect(numberCard)\n\n        \n\n        responseSelected.length = cardId\n        stockContainers.length = containerIndex\n\n        \n        let stockResponseSelected = ([...responseSelected, numberCard])\n\n            for(let a = 0; a < cardsRes.length; a++){\n                if(cardsRes[a].length){\n                    for(let b = 0; b < cardsRes[a].length; b++){\n                            for(let c = 0; c < stockResponseSelected.length; c++){\n                                const nbRes = cardsRes[a].filter(card => stockResponseSelected.includes(card.id))\n                                if(nbRes.length > 1){\n                                    for(let i = 0; i < stockResponseSelected.length; i++){\n                                        console.log(nbRes)\n                                        for(let a = 0; a < nbRes.length - 1; a++){\n                                            if(nbRes[a].id === (stockResponseSelected[i])){\n                                                stockResponseSelected.splice(i, 1)\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n        setResponseSelected(stockResponseSelected)\n\n        setStorageContainers(stockContainers)\n\n        setTimeout(() => {\n            printContainers()\n            setResponseBool(true)\n        }, 200)\n        setTimeout(() => {\n            window.scrollTo(0,document.body.scrollHeight);\n        }, 700)\n    }\n\n\n    \n\n    return(\n        <div className=\"containerAreaChatBot\">\n            {Array.isArray(containers) &&\n            containers.map((container, index) => {\n                return(\n                    <div className={container.content_type === \"question\" && index%3 !== 0 ? \"contentQuestionChat\" : container.content_type === \"question\" && index%3 === 0 ? \"contentQuestionChatDecale\" : container.content_type === \"response\" ? \"contentResponseChat\" : \"contentDestinationChat\"}>\n                            {Array.isArray(cardsQuest[index]) && container.content_type === \"question\" &&\n                                cardsQuest[index].map(card => {\n                                    return(\n                                        <Questionchat pair={pair} question={card.content.split('')}/>\n                                    )\n                                })}\n                            {Array.isArray(cardsRes[index]) && container.content_type === \"response\" &&\n                                cardsRes[index].map(card => {\n                                    return(\n                                        <div onClick={() => {selectResponse(card.id, index)}}   className={responseSelected.includes(card.id) ? 'containerCardResChatActive' : 'containerCardResChat'}>\n                                            <p id={`container${index}`} className=\"textCardResChat\">{card.content}</p>\n                                        </div>)\n                                        })\n                                    }\n                            {Array.isArray(cardsCategory[index]) && container.content_type === \"category\" &&\n                                cardsCategory[index].map(card => {\n                                    console.log(card)\n                                    return(\n                                        <FormContact categoryId={card.id} userId={userId} modelId={modelId} />\n                                    )\n                                })}\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default ChatBotArea"]},"metadata":{},"sourceType":"module"}