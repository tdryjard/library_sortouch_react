{"ast":null,"code":"var _jsxFileName = \"/home/thomas/library_sortouch/react_library/src/lib/chatbotArea/ChatBotArea.js\";\nimport React, { useState, useEffect } from 'react';\nimport Questionchat from '../questionBlock/QuestionChat';\nimport FormContact from '../fromContact/FormContact';\nimport './ChatBotArea.css';\n\nconst ChatBotArea = () => {\n  const [containers, setContainers] = useState([]);\n  const [cardsQuest, setCardsQuest] = useState([]);\n  const [cardsRes, setCardsRes] = useState([]);\n  const [cardsCategory, setCardsCategory] = useState([]);\n  const [responseSelect, setResponseSelect] = useState(0);\n  const [storageContainers, setStorageContainers] = useState();\n  const [responseSelected, setResponseSelected] = useState([]);\n  const [pair, setPair] = useState(false);\n  const [modelId, setModelId] = useState(3);\n  const [userId, setUserId] = useState(1);\n  const [cardsQuestFilter, setCardsQuestFilter] = useState([]);\n  const [chatActive, setChatActive] = useState(false);\n  const [textIcon, setTextIcon] = useState(true);\n  useEffect(() => {\n    printContainers();\n  }, [userId, responseSelected]);\n  useEffect(() => {\n    setTimeout(() => {\n      setTextIcon(false);\n    }, 7000);\n  });\n\n  const printContainers = async () => {\n    try {\n      fetch(`http://192.168.43.193:8000/api/container/findAll/${userId}/${responseSelect}/${modelId}`).then(res => res.json()).then(res => {\n        if (res.length) {\n          if (storageContainers) {\n            let resResult = res.filter(res => res.response_id != null);\n            let newContainer = [...storageContainers, ...resResult];\n            setContainers(newContainer);\n            takeCard(newContainer);\n          } else {\n            setContainers(res);\n            takeCard(res);\n          }\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n\n    setStorageContainers(containers);\n  };\n\n  const takeCard = async res => {\n    let stock = [];\n\n    for (let i = 0; i < res.length + 3; i++) {\n      if (res[i]) {\n        let resulted = await fetch(`http://192.168.43.193:8000/api/relation/findCardQuestion/${res[i].id}/${userId}/${modelId}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const result = await resulted.json();\n        stock = [...stock, result];\n      }\n    }\n\n    if (stock.length) {\n      setCardsQuest(stock);\n      const stockFilter = await stock.filter(quest => quest[0]);\n      setCardsQuestFilter(stockFilter);\n    }\n\n    let stockRes = [];\n\n    for (let i = 0; i < res.length + 3; i++) {\n      if (res[i]) {\n        let resulted = await fetch(`http://192.168.43.193:8000/api/relation/findCardResponse/${res[i].id}/${userId}/${modelId}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const result = await resulted.json();\n        stockRes = [...stockRes, result];\n      }\n    }\n\n    setCardsRes(stockRes);\n    let stockCategory = [];\n\n    for (let i = 0; i < res.length + 3; i++) {\n      if (typeof res[i] === 'object') {\n        let resulted = await fetch(`http://192.168.43.193:8000/api/relation/findCardCategory/${res[i].id}/${userId}/${modelId}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const result = await resulted.json();\n        stockCategory = [...stockCategory, result];\n      }\n    }\n\n    setCardsCategory(stockCategory);\n  };\n\n  const selectResponse = async function (cardId, index) {\n    setPair(!pair);\n    const stockContainers = containers;\n    const numberCard = cardId;\n    const containerIndex = index + 1;\n    setResponseSelect(numberCard);\n    responseSelected.length = cardId;\n    stockContainers.length = containerIndex;\n    let stockResponseSelected = [...responseSelected, numberCard];\n\n    for (let a = 0; a < cardsRes.length; a++) {\n      if (cardsRes[a].length) {\n        for (let b = 0; b < cardsRes[a].length; b++) {\n          for (let c = 0; c < stockResponseSelected.length; c++) {\n            const nbRes = cardsRes[a].filter(card => stockResponseSelected.includes(card.id));\n\n            if (nbRes.length > 1) {\n              for (let i = 0; i < stockResponseSelected.length; i++) {\n                for (let a = 0; a < nbRes.length - 1; a++) {\n                  if (nbRes[a].id === stockResponseSelected[i]) {\n                    stockResponseSelected.splice(i, 1);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    setResponseSelected(stockResponseSelected);\n    setStorageContainers(stockContainers);\n\n    if (stockContainers) {\n      console.log(cardsQuest);\n      printContainers();\n    }\n\n    setTimeout(() => {\n      window.scrollTo(0, document.body.scrollHeight);\n    }, 700);\n  };\n\n  const activeChat = () => {\n    setChatActive(true);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: !chatActive ? \"containerIconChat\" : \"containerChatbot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, chatActive && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"headChatbot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    onClick: () => {\n      setChatActive(!chatActive);\n    },\n    alt: \"close sortouch\",\n    src: require('./image/cross.png'),\n    className: \"corssChatBot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 21\n    }\n  })), chatActive, !chatActive ? /*#__PURE__*/React.createElement(React.Fragment, null, textIcon && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"contentTextIconChat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"textIconCard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Questionchat, {\n    text: \"Prenez contact avec moi !\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 49\n    }\n  }))), /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"icon chat\",\n    onClick: activeChat,\n    src: require('./image/logo.png'),\n    className: \"iconChat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }\n  })) : Array.isArray(containers) && containers.map((container, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: container.content_type === \"question\" && index % 3 !== 0 ? \"contentQuestionChat\" : container.content_type === \"question\" && index % 3 === 0 ? \"contentQuestionChatDecale\" : container.content_type === \"response\" ? \"contentResponseChat\" : \"contentDestinationChat\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }\n    }, Array.isArray(cardsQuest[index]) && container.content_type === \"question\" && cardsQuest[index].map(card => {\n      return cardsQuestFilter[cardsQuestFilter.length - 1] && card.id === cardsQuestFilter[cardsQuestFilter.length - 1][0].id ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"contentQuestChat\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Questionchat, {\n        text: card.content,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 45\n        }\n      }), /*#__PURE__*/React.createElement(\"img\", {\n        alt: \"sortouch\",\n        src: require('../chatbotArea/image/logo.png'),\n        className: \"logoChat\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 45\n        }\n      })) : /*#__PURE__*/React.createElement(\"div\", {\n        className: \"contentQuestChat\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"textQuest\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 45\n        }\n      }, card.content), /*#__PURE__*/React.createElement(\"img\", {\n        alt: \"sortouch\",\n        src: require('../chatbotArea/image/logo.png'),\n        className: \"logoChat\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 45\n        }\n      }));\n    }), Array.isArray(cardsRes[index]) && container.content_type === \"response\" && cardsRes[index].map(card => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        onClick: () => {\n          selectResponse(card.id, index);\n        },\n        className: responseSelected.includes(card.id) ? 'containerCardResChatActive' : 'containerCardResChat',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        id: `container${index}`,\n        className: \"textCardResChat\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 45\n        }\n      }, card.content));\n    }), Array.isArray(cardsCategory[index]) && container.content_type === \"category\" && cardsCategory[index].map(card => {\n      return /*#__PURE__*/React.createElement(FormContact, {\n        categoryId: card.id,\n        userId: userId,\n        modelId: modelId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 41\n        }\n      });\n    }));\n  }));\n};\n\nexport default ChatBotArea;","map":{"version":3,"sources":["/home/thomas/library_sortouch/react_library/src/lib/chatbotArea/ChatBotArea.js"],"names":["React","useState","useEffect","Questionchat","FormContact","ChatBotArea","containers","setContainers","cardsQuest","setCardsQuest","cardsRes","setCardsRes","cardsCategory","setCardsCategory","responseSelect","setResponseSelect","storageContainers","setStorageContainers","responseSelected","setResponseSelected","pair","setPair","modelId","setModelId","userId","setUserId","cardsQuestFilter","setCardsQuestFilter","chatActive","setChatActive","textIcon","setTextIcon","printContainers","setTimeout","fetch","then","res","json","length","resResult","filter","response_id","newContainer","takeCard","error","console","log","stock","i","resulted","id","method","headers","result","stockFilter","quest","stockRes","stockCategory","selectResponse","cardId","index","stockContainers","numberCard","containerIndex","stockResponseSelected","a","b","c","nbRes","card","includes","splice","window","scrollTo","document","body","scrollHeight","activeChat","require","Array","isArray","map","container","content_type","content"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Questionchat from '../questionBlock/QuestionChat';\nimport FormContact from '../fromContact/FormContact';\nimport './ChatBotArea.css'\n\nconst ChatBotArea = () => {\n    const [containers, setContainers] = useState([])\n    const [cardsQuest, setCardsQuest] = useState([])\n    const [cardsRes, setCardsRes] = useState([])\n    const [cardsCategory, setCardsCategory] = useState([])\n    const [responseSelect, setResponseSelect] = useState(0)\n    const [storageContainers, setStorageContainers] = useState()\n    const [responseSelected, setResponseSelected] = useState([])\n    const [pair, setPair] = useState(false)\n    const [modelId, setModelId] = useState(3)\n    const [userId, setUserId] = useState(1)\n    const [cardsQuestFilter, setCardsQuestFilter] = useState([])\n    const [chatActive, setChatActive] = useState(false)\n    const [textIcon, setTextIcon] = useState(true)\n\n    useEffect(() => {\n        printContainers()\n    },[userId, responseSelected])\n\n    useEffect(() => {\n        setTimeout(() => {\n            setTextIcon(false)\n        }, 7000)\n    })\n\n    const printContainers = async () => {\n        try{\n            fetch(`http://192.168.43.193:8000/api/container/findAll/${userId}/${responseSelect}/${modelId}`)\n            .then(res => res.json())\n            .then(res => {\n                if(res.length){\n                    if(storageContainers){\n                        let resResult = res.filter(res => res.response_id != null)\n                        let newContainer = [...storageContainers, ...resResult]\n                        setContainers(newContainer)\n                        takeCard(newContainer)\n                    } else {\n                        setContainers(res)\n                        takeCard(res)\n                    }\n                }\n            })\n            \n            \n        } catch(error) {\n            console.log(error)\n        }\n        setStorageContainers(containers)\n    }\n\n    const takeCard = async (res) => {\n        let stock = []\n        for(let i = 0; i < res.length + 3; i++){\n            if(res[i]){\n                let resulted = await fetch(`http://192.168.43.193:8000/api/relation/findCardQuestion/${res[i].id}/${userId}/${modelId}`, {\n                    method: 'GET',\n                    headers: {\n                    'Content-Type' :'application/json'\n                    }\n                })\n                const result = await resulted.json()\n                stock = [...stock, result]\n            }\n        }\n        if(stock.length){\n\n        setCardsQuest(stock)\n        const stockFilter = await stock.filter(quest => quest[0])\n        setCardsQuestFilter(stockFilter)\n\n        }\n\n\n        let stockRes = []\n        for(let i = 0; i < res.length + 3; i++){\n            if(res[i]){\n                let resulted = await fetch(`http://192.168.43.193:8000/api/relation/findCardResponse/${res[i].id}/${userId}/${modelId}`, {\n                    method: 'GET',\n                    headers: {\n                    'Content-Type' :'application/json'\n                    }\n                })\n                const result = await resulted.json()\n                stockRes = [...stockRes, result]\n            }\n        }\n        setCardsRes(stockRes)\n        let stockCategory = []\n        for(let i = 0; i < res.length + 3; i++){\n            if(typeof res[i] === 'object'){\n                let resulted = await fetch(`http://192.168.43.193:8000/api/relation/findCardCategory/${res[i].id}/${userId}/${modelId}`, {\n                    method: 'GET',\n                    headers: {\n                    'Content-Type' :'application/json'\n                    }\n                })\n                const result = await resulted.json()\n                stockCategory = [...stockCategory, result]\n            }\n        }\n        setCardsCategory(stockCategory)\n    }\n\n    const selectResponse = async function (cardId, index) {\n        setPair(!pair)\n        const stockContainers = containers\n        const numberCard = cardId\n        const containerIndex = index + 1\n        setResponseSelect(numberCard)\n\n        \n\n        responseSelected.length = cardId\n        stockContainers.length = containerIndex\n\n        \n        let stockResponseSelected = ([...responseSelected, numberCard])\n\n            for(let a = 0; a < cardsRes.length; a++){\n                if(cardsRes[a].length){\n                    for(let b = 0; b < cardsRes[a].length; b++){\n                            for(let c = 0; c < stockResponseSelected.length; c++){\n                                const nbRes = cardsRes[a].filter(card => stockResponseSelected.includes(card.id))\n                                if(nbRes.length > 1){\n                                    for(let i = 0; i < stockResponseSelected.length; i++){\n                                        for(let a = 0; a < nbRes.length - 1; a++){\n                                            if(nbRes[a].id === (stockResponseSelected[i])){\n                                                stockResponseSelected.splice(i, 1)\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n        setResponseSelected(stockResponseSelected)\n\n        setStorageContainers(stockContainers)\n\n        if(stockContainers){\n            console.log(cardsQuest)\n            printContainers()\n        }\n\n        setTimeout(() => {\n            window.scrollTo(0,document.body.scrollHeight);\n        }, 700)\n    }\n\n\n    const activeChat = () => {\n        setChatActive(true)\n    }\n    \n\n    \n\n    return(\n        <div className={!chatActive ? \"containerIconChat\" : \"containerChatbot\"}>\n            {chatActive &&\n                <div className=\"headChatbot\">\n                    <img onClick={() => {setChatActive(!chatActive)}} alt=\"close sortouch\" src={require('./image/cross.png')} className=\"corssChatBot\"/>\n                </div>}\n            {chatActive}\n            {!chatActive ?\n            <>\n                {textIcon &&\n                <div className=\"contentTextIconChat\">\n                    <p className=\"textIconCard\"><Questionchat text={\"Prenez contact avec moi !\"}/></p>\n                </div>}\n                <img alt=\"icon chat\" onClick={activeChat} src={require('./image/logo.png')} className=\"iconChat\"/>\n            </>\n            :\n            Array.isArray(containers) &&\n            containers.map((container, index) => {\n                return(\n                    <div className={container.content_type === \"question\" && index%3 !== 0 ? \"contentQuestionChat\" : container.content_type === \"question\" && index%3 === 0 ? \"contentQuestionChatDecale\" : container.content_type === \"response\" ? \"contentResponseChat\" : \"contentDestinationChat\"}>\n                            {Array.isArray(cardsQuest[index]) && container.content_type === \"question\" &&\n                                cardsQuest[index].map(card => {\n                                    return(\n                                        cardsQuestFilter[cardsQuestFilter.length - 1] && card.id === cardsQuestFilter[cardsQuestFilter.length - 1][0].id ?\n                                        <div className=\"contentQuestChat\">\n                                            <Questionchat text={card.content}/>\n                                            <img alt=\"sortouch\" src={require('../chatbotArea/image/logo.png')} className=\"logoChat\"/>\n                                        </div>\n                                        :\n                                        <div className=\"contentQuestChat\">\n                                            <p className=\"textQuest\">{card.content}</p>\n                                            <img alt=\"sortouch\" src={require('../chatbotArea/image/logo.png')} className=\"logoChat\"/>\n                                        </div>\n                                    )\n                                })}\n                            {Array.isArray(cardsRes[index]) && container.content_type === \"response\" &&\n                                cardsRes[index].map(card => {\n                                    return(\n                                        <div onClick={() => {selectResponse(card.id, index)}}   className={responseSelected.includes(card.id) ? 'containerCardResChatActive' : 'containerCardResChat'}>\n                                            <p id={`container${index}`} className=\"textCardResChat\">{card.content}</p>\n                                        </div>)\n                                        })\n                                    }\n                            {Array.isArray(cardsCategory[index]) && container.content_type === \"category\" &&\n                                cardsCategory[index].map(card => {\n                                    return(\n                                        <FormContact categoryId={card.id} userId={userId} modelId={modelId} />\n                                    )\n                                })}\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default ChatBotArea"]},"metadata":{},"sourceType":"module"}