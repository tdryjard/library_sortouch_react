{"ast":null,"code":"var _jsxFileName = \"/home/thomas/library_sortouch/react_library/src/lib/chatbotArea/ChatBotArea.js\";\nimport React, { useState, useEffect } from 'react';\nimport Questionchat from '../questionBlock/QuestionChat';\nimport FormContact from '../fromContact/FormContact';\nimport './ChatBotArea.css';\n\nconst ChatBotArea = () => {\n  const [containers, setContainers] = useState([]);\n  const [cardsQuest, setCardsQuest] = useState([]);\n  const [cardsRes, setCardsRes] = useState([]);\n  const [cardsCategory, setCardsCategory] = useState([]);\n  const [responseSelect, setResponseSelect] = useState(0);\n  const [storageContainers, setStorageContainers] = useState();\n  const [responseSelected, setResponseSelected] = useState([]);\n  const [, setResponseBool] = useState(false);\n  const [, setLastResContainerIndex] = useState();\n  const [pair, setPair] = useState(false);\n  const [modelId, setModelId] = useState(3);\n  const [userId, setUserId] = useState(1);\n  const [totalQuestion, setTotalQuestion] = useState([]);\n  useEffect(() => {\n    console.log('dalu');\n    printContainers();\n  }, [userId, responseSelected]);\n\n  const printContainers = async () => {\n    try {\n      console.log(`/container/findAll/${userId}/${modelId}/${responseSelect}`);\n      const resJson = await fetch(`${url}/container/findAll/${userId}/${responseSelect}/${modelId}`);\n      const res = await resJson.json();\n      const storageContainer = await storageContainers;\n\n      if (res.length) {\n        const stockRes = res.slice().reverse();\n\n        if (storageContainer) {\n          let resResult = res.filter(res => res.response_id != null);\n          let newContainer = [...storageContainer, ...resResult];\n          setContainers(newContainer);\n          takeCard(newContainer);\n        } else {\n          setContainers(res);\n          takeCard(res);\n        }\n\n        setContainersReverse(stockRes);\n        setOrder(stockRes[0].ordering + 1);\n      } else setOrder(1);\n    } catch (error) {\n      console.log(error);\n    }\n\n    setStorageContainers(containers);\n  };\n\n  console.log(containers);\n\n  const takeCard = async res => {\n    let stock = [];\n\n    for (let i = 0; i < res.length + 3; i++) {\n      if (res[i]) {\n        let resulted = await fetch(`http://192.168.43.193:8000/api/relation/findCardQuestion/${res[i].id}/${userId}/${modelId}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const result = await resulted.json();\n        console.log(result);\n        stock = [...stock, result];\n      }\n    }\n\n    setCardsQuest(stock);\n    console.log(stock);\n    let resResult = stock.filter(res => res[0]);\n    console.log(resResult);\n    printText(resResult[resResult.length - 1]);\n    let stockRes = [];\n\n    for (let i = 0; i < res.length + 3; i++) {\n      if (res[i]) {\n        let resulted = await fetch(`http://192.168.43.193:8000/api/relation/findCardResponse/${res[i].id}/${userId}/${modelId}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const result = await resulted.json();\n        console.log(result);\n        stockRes = [...stockRes, result];\n        console.log(stockRes);\n      }\n    }\n\n    setCardsRes(stockRes);\n    let stockCategory = [];\n\n    for (let i = 0; i < res.length + 3; i++) {\n      if (typeof res[i] === 'object') {\n        let resulted = await fetch(`http://192.168.43.193:8000/api/relation/findCardCategory/${res[i].id}/${userId}/${modelId}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const result = await resulted.json();\n        stockCategory = [...stockCategory, result];\n      }\n    }\n\n    setCardsCategory(stockCategory);\n  };\n\n  const selectResponse = async function (cardId, index) {\n    console.log(pair);\n    setPair(!pair);\n    const stockContainers = containers;\n    const numberCard = cardId;\n    const containerIndex = index;\n    setLastResContainerIndex(containerIndex);\n    setResponseSelect(numberCard);\n    responseSelected.length = cardId;\n    stockContainers.length = containerIndex;\n    let stockResponseSelected = [...responseSelected, numberCard];\n\n    for (let a = 0; a < cardsRes.length; a++) {\n      if (cardsRes[a].length) {\n        for (let b = 0; b < cardsRes[a].length; b++) {\n          for (let c = 0; c < stockResponseSelected.length; c++) {\n            const nbRes = cardsRes[a].filter(card => stockResponseSelected.includes(card.id));\n\n            if (nbRes.length > 1) {\n              for (let i = 0; i < stockResponseSelected.length; i++) {\n                console.log(nbRes);\n\n                for (let a = 0; a < nbRes.length - 1; a++) {\n                  if (nbRes[a].id === stockResponseSelected[i]) {\n                    stockResponseSelected.splice(i, 1);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (stockContainers) {\n      printContainers();\n      setResponseBool(true);\n    }\n\n    setResponseSelected(stockResponseSelected);\n    setStorageContainers(stockContainers);\n    setTimeout(() => {\n      window.scrollTo(0, document.body.scrollHeight);\n    }, 700);\n  };\n\n  const printText = text => {\n    console.log(text);\n\n    if (text) {\n      let index = 0;\n      let question = text[0].content.split('');\n      console.log(question);\n      let stockQuestion = [];\n      const questionPrint = setInterval(() => {\n        stockQuestion = [...stockQuestion, question[index]];\n        setTotalQuestion(stockQuestion);\n        index++;\n\n        if (index === question.length) {\n          clearInterval(questionPrint);\n          return true;\n        }\n      }, 50);\n    }\n  };\n\n  console.log(cardsRes);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"containerAreaChatBot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  }, Array.isArray(containers) && containers.map((container, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: container.content_type === \"question\" && index % 3 !== 0 ? \"contentQuestionChat\" : container.content_type === \"question\" && index % 3 === 0 ? \"contentQuestionChatDecale\" : container.content_type === \"response\" ? \"contentResponseChat\" : \"contentDestinationChat\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }\n    }, Array.isArray(cardsQuest[index]) && container.content_type === \"question\" && cardsQuest[index].map(card => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"contentTextQuestChatbot\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        id: `quest${card.id}`,\n        className: \"textQuestChatbot\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 45\n        }\n      }, totalQuestion));\n    }), Array.isArray(cardsRes[index]) && container.content_type === \"response\" && cardsRes[index].map(card => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        onClick: () => {\n          selectResponse(card.id, index);\n        },\n        className: responseSelected.includes(card.id) ? 'containerCardResChatActive' : 'containerCardResChat',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        id: `container${index}`,\n        className: \"textCardResChat\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 45\n        }\n      }, card.content));\n    }), Array.isArray(cardsCategory[index]) && container.content_type === \"category\" && cardsCategory[index].map(card => {\n      console.log(card);\n      return /*#__PURE__*/React.createElement(FormContact, {\n        categoryId: card.id,\n        userId: userId,\n        modelId: modelId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 41\n        }\n      });\n    }));\n  }));\n};\n\nexport default ChatBotArea;","map":{"version":3,"sources":["/home/thomas/library_sortouch/react_library/src/lib/chatbotArea/ChatBotArea.js"],"names":["React","useState","useEffect","Questionchat","FormContact","ChatBotArea","containers","setContainers","cardsQuest","setCardsQuest","cardsRes","setCardsRes","cardsCategory","setCardsCategory","responseSelect","setResponseSelect","storageContainers","setStorageContainers","responseSelected","setResponseSelected","setResponseBool","setLastResContainerIndex","pair","setPair","modelId","setModelId","userId","setUserId","totalQuestion","setTotalQuestion","console","log","printContainers","resJson","fetch","url","res","json","storageContainer","length","stockRes","slice","reverse","resResult","filter","response_id","newContainer","takeCard","setContainersReverse","setOrder","ordering","error","stock","i","resulted","id","method","headers","result","printText","stockCategory","selectResponse","cardId","index","stockContainers","numberCard","containerIndex","stockResponseSelected","a","b","c","nbRes","card","includes","splice","setTimeout","window","scrollTo","document","body","scrollHeight","text","question","content","split","stockQuestion","questionPrint","setInterval","clearInterval","Array","isArray","map","container","content_type"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Questionchat from '../questionBlock/QuestionChat';\nimport FormContact from '../fromContact/FormContact';\nimport './ChatBotArea.css'\n\nconst ChatBotArea = () => {\n    const [containers, setContainers] = useState([])\n    const [cardsQuest, setCardsQuest] = useState([])\n    const [cardsRes, setCardsRes] = useState([])\n    const [cardsCategory, setCardsCategory] = useState([])\n    const [responseSelect, setResponseSelect] = useState(0)\n    const [storageContainers, setStorageContainers] = useState()\n    const [responseSelected, setResponseSelected] = useState([])\n    const [, setResponseBool] = useState(false)\n    const [, setLastResContainerIndex] = useState()\n    const [pair, setPair] = useState(false)\n    const [modelId, setModelId] = useState(3)\n    const [userId, setUserId] = useState(1)\n    const [totalQuestion, setTotalQuestion] = useState([])\n\n    useEffect(() => {\n        console.log('dalu')\n        printContainers()\n    },[userId, responseSelected])\n\n    const printContainers = async () => {\n        try{\n            console.log(`/container/findAll/${userId}/${modelId}/${responseSelect}`)\n            const resJson = await fetch(`${url}/container/findAll/${userId}/${responseSelect}/${modelId}`)\n            const res = await resJson.json()\n            const storageContainer = await storageContainers\n                if(res.length){\n                    const stockRes = res.slice().reverse()\n                    if(storageContainer){\n                        let resResult = res.filter(res => res.response_id != null)\n                        let newContainer = [...storageContainer, ...resResult]\n                        setContainers(newContainer)\n                        takeCard(newContainer)\n                    } else {\n                        setContainers(res)\n                        takeCard(res)\n                    }\n                    setContainersReverse(stockRes)\n                    setOrder(stockRes[0].ordering + 1)\n                } else setOrder(1)\n            \n        } catch(error) {\n            console.log(error)\n        }\n        setStorageContainers(containers)\n    }\n\n    console.log(containers)\n\n    const takeCard = async (res) => {\n        let stock = []\n        for(let i = 0; i < res.length + 3; i++){\n            if(res[i]){\n                let resulted = await fetch(`http://192.168.43.193:8000/api/relation/findCardQuestion/${res[i].id}/${userId}/${modelId}`, {\n                    method: 'GET',\n                    headers: {\n                    'Content-Type' :'application/json'\n                    }\n                })\n                const result = await resulted.json()\n                console.log(result)\n                stock = [...stock, result]\n            }\n        }\n        setCardsQuest(stock)\n        console.log(stock)\n        let resResult = stock.filter(res => res[0])\n        console.log(resResult)\n        printText(resResult[resResult.length - 1])\n\n\n        let stockRes = []\n        for(let i = 0; i < res.length + 3; i++){\n            if(res[i]){\n                let resulted = await fetch(`http://192.168.43.193:8000/api/relation/findCardResponse/${res[i].id}/${userId}/${modelId}`, {\n                    method: 'GET',\n                    headers: {\n                    'Content-Type' :'application/json'\n                    }\n                })\n                const result = await resulted.json()\n                console.log(result)\n                stockRes = [...stockRes, result]\n                console.log(stockRes)\n            }\n        }\n        setCardsRes(stockRes)\n        let stockCategory = []\n        for(let i = 0; i < res.length + 3; i++){\n            if(typeof res[i] === 'object'){\n                let resulted = await fetch(`http://192.168.43.193:8000/api/relation/findCardCategory/${res[i].id}/${userId}/${modelId}`, {\n                    method: 'GET',\n                    headers: {\n                    'Content-Type' :'application/json'\n                    }\n                })\n                const result = await resulted.json()\n                stockCategory = [...stockCategory, result]\n            }\n        }\n        setCardsCategory(stockCategory)\n    }\n\n    const selectResponse = async function (cardId, index) {\n        console.log(pair)\n        setPair(!pair)\n        const stockContainers = containers\n        const numberCard = cardId\n        const containerIndex = index\n\n        setLastResContainerIndex(containerIndex)\n        setResponseSelect(numberCard)\n\n        \n\n        responseSelected.length = cardId\n        stockContainers.length = containerIndex\n\n        \n        let stockResponseSelected = ([...responseSelected, numberCard])\n\n            for(let a = 0; a < cardsRes.length; a++){\n                if(cardsRes[a].length){\n                    for(let b = 0; b < cardsRes[a].length; b++){\n                            for(let c = 0; c < stockResponseSelected.length; c++){\n                                const nbRes = cardsRes[a].filter(card => stockResponseSelected.includes(card.id))\n                                if(nbRes.length > 1){\n                                    for(let i = 0; i < stockResponseSelected.length; i++){\n                                        console.log(nbRes)\n                                        for(let a = 0; a < nbRes.length - 1; a++){\n                                            if(nbRes[a].id === (stockResponseSelected[i])){\n                                                stockResponseSelected.splice(i, 1)\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n        if(stockContainers){\n            printContainers()\n            setResponseBool(true)\n        }\n\n        setResponseSelected(stockResponseSelected)\n\n        setStorageContainers(stockContainers)\n\n        setTimeout(() => {\n            window.scrollTo(0,document.body.scrollHeight);\n        }, 700)\n    }\n\n    const printText = (text) => {\n        console.log(text)\n        if(text){\n            let index = 0\n            let question = text[0].content.split('')\n            console.log(question)\n            let stockQuestion = []\n            const questionPrint = setInterval(() => {\n                stockQuestion = [...stockQuestion, question[index]]\n                setTotalQuestion(stockQuestion)\n                index++\n                if(index === question.length){\n                    clearInterval(questionPrint)\n                    return(true)\n                }\n        }, 50)\n        }\n    }\n\n    console.log(cardsRes)\n\n\n    \n\n    \n\n    return(\n        <div className=\"containerAreaChatBot\">\n            {Array.isArray(containers) &&\n            containers.map((container, index) => {\n                return(\n                    <div className={container.content_type === \"question\" && index%3 !== 0 ? \"contentQuestionChat\" : container.content_type === \"question\" && index%3 === 0 ? \"contentQuestionChatDecale\" : container.content_type === \"response\" ? \"contentResponseChat\" : \"contentDestinationChat\"}>\n                            {Array.isArray(cardsQuest[index]) && container.content_type === \"question\" &&\n                                cardsQuest[index].map(card => {\n                                    return(\n                                        <div className=\"contentTextQuestChatbot\">\n                                            <p id={`quest${card.id}`} className=\"textQuestChatbot\">{totalQuestion}</p>\n                                        </div>\n                                    )\n                                })}\n                            {Array.isArray(cardsRes[index]) && container.content_type === \"response\" &&\n                                cardsRes[index].map(card => {\n                                    return(\n                                        <div onClick={() => {selectResponse(card.id, index)}}   className={responseSelected.includes(card.id) ? 'containerCardResChatActive' : 'containerCardResChat'}>\n                                            <p id={`container${index}`} className=\"textCardResChat\">{card.content}</p>\n                                        </div>)\n                                        })\n                                    }\n                            {Array.isArray(cardsCategory[index]) && container.content_type === \"category\" &&\n                                cardsCategory[index].map(card => {\n                                    console.log(card)\n                                    return(\n                                        <FormContact categoryId={card.id} userId={userId} modelId={modelId} />\n                                    )\n                                })}\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default ChatBotArea"]},"metadata":{},"sourceType":"module"}